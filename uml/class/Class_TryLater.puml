@startuml
skinparam classAttributeIconSize 0
hide empty members

class User {
    - id : Long
    - userName : String
    - displayName : String
    - email : String
    - password : String
    - imgPath : String
    - registrationDate : LocalDateTime
    + constructor()
    + getter()
    + setter()
}

interface UserRepository {
    - user : Set<User>
    + findByEmailOrUserName(email: String, userName: String) : User
    + existsByEmail(email : String) : boolean
    + existsByUserName(userName : String) : boolean
    + save(user : User)
    + update(user : User)
    + delete(user : User)
}

class UserService {
    - userRepository : UserRepository
    + registerUser(user : User)
    + updateUser(user : User
    + deleteUser(user : User)
    + findByEmailOrUserName(input : String) : User
}

class UserController {
    - userService : UserService
    - authService : AuthService
    + GET /api/user/me() <<secured>>
    + GET /api/user/search() <<secured>>
    + POST /api/user()
    + PATCH /api/user/me() <<secured>>
    + DELETE /api/user/me() <<secured>>
}

class JwtService {
    + generateToken(userName : String) : Token
    + extractUserName(token : Token) : String
}

class JwtAuthFilter {
    - jwtService : JwtService
    - authService : AuthService
    - userService : UserService
    # doFilterInternal()
}

note right of JwtAuthFilter
    Der JwtAuthFilter kontrolliert den
    Zugriff auf geschützte Endpunkte.
    Fehlt ein Token oder ist dieser
    ungültig, wird die Anfrage abgelehnt.
    Ein gültiger Token macht den User
    im Controller verfügbar.
end note

class AuthService {
    - jwtService : JwtService
    + login() : User
    + logout() : void
}

class AuthController {
    + POST /api/auth/login()
    + POST /api/auth/logout() <<secured>>
}

enum ContactStatus {
    PENDING
    ACCEPTED
    BLOCKED
}

class Contact {
    - id : Long
    - requester : User
    - receiver : User
    - requestDate : LocalDateTime
    - acceptDate : LocalDateTime
    - status : ContactStatus
    + constructor()
    + getter()
    + setter()
}

interface ContactRepository {
    - contacts : Set<Contact>
    + findAllByRequesterOrReceiverAndContactStatus(user : User) : Set<Contact>
    + findContactById(contactId : Long) : Contact
    + save(contact : Contact)
    + update(contact : Contact)
    + delete(contact : Contact)
}

class ContactService {
    - contactRepository : ContactRepository
    + getContactsByStatus(user : User, contactStatus : ContactStatus)
    + getContactById(contactId : Long)
    + createContact(user : User, receiverId : Long)
    + updateContactStatus(user : User, contactStatus : ContactStatus)
    + deleteContact(contactId : Long)
}

class ContactController {
    - contactService : ContactService
    + GET /api/contact() <<secured>>
    + GET /api/contact/{id}() <<secured>>
    + POST /api/contact() <<secured>>
    + PATCH /api/contact/{id}() <<secured>>
    + DELETE /api/contact/{id}() <<secured>>
}

class Recommendation {
    - id : Long
    - title : String
    - description : String
    - url : URL
    - imgPath : String
    - creator : User
    - creationDate : LocalDateTime
    - rating : Int
    - category : Category
    - tags : Set<Tag>
    + constructor()
    + getter()
    + setter()
}
interface RecommendationRepository {
    - recommendations : Set<Recommendation>
    + findById(recommendationId : Long) : Recommendation
    + save(recommendation : Recommendation)
    + update(recommendation : Recommendation)
    + delete(recommendation : Recommendation)
}
class RecommendationService {
    - userService : UserService
    - recommendationRepository : RecommendationRepository
    - recommendationAssignmentRepository : RecommendationAssignmentRepository
    - categoryRepository : CategoryRepository
    - tagGroupRepository : TagGroupRepository
    - tagRepository : TagRepository
    + getRecommendationsByStatus(user : User, recommendationAssignmentStatus : RecommendationAssignmentStatus)
    + createRecommendation(user : User, requestBody : RequestBody)
    + createRecommendationAssignments(recommendation : Recommendation, receiver : Set<User>)
    + updateRecommendationStatus(user : User, recommendationAssignmentStatus : RecommendationAssignmentStatus)
    + deleteRecommendation(user : User, (recommendationId : Long)
}
class RecommendationController {
    + GET /api/recommendation() <<secured>>
    + POST /api/recommendation() <<secured>>
    + PATCH /api/recommendation/{id}() <<secured>>
    + DELETE /api/recommendation/{id}() <<secured>>
}

class RecommendationAssignment {
    - id : Long
    - receiver : User
    - recommendation : Recommendation
    - recommendationAssignmentStatus : RecommendationAssignmentStatus
    - sentAt : LocalDateTime
    - acceptedAt : LocalDateTime
    + constructor()
    + getter()
    + setter()
}
interface RecommendationAssignmentRepository {
    - recommendationAssignments : Set<RecommendationAssignment>
    + findAllByUserAndStatus(user : User, status : RecommendationAssignmentStatus) : Set<RecommendationAssignment>
    + save(recommendationAssignment : RecommendationAssignment)
    + update(recommendationAssignment : RecommendationAssignment)
    + delete(recommendationAssignment : RecommendationAssignment)
}
enum RecommendationAssignmentStatus {
    SENT,
    ACCEPTED
}

class Category {
    - id : Long
    - categoryType : CategoryType
    - tagGroups : Set<TagGroup>
    + constructor()
    + getter()
    + setter()
}
interface CategoryRepository {
    - categories : Set<Category>
    + findByCategoryType(categoryType : CategoryType) : Category
    + save(category : Category)
    + update(category : Category)
    + delete(category : Category)
}
enum CategoryType {
    RECIPE,
    MEDIA,
    LOCATION,
    PRODUCT
}

class TagGroup {
    - id : Long
    - tagGroupName : String
    - category : Category
    - tags : Set<Tag>
    + constructor()
    + getter()
    + setter()
}
interface TagGroupRepository {
    - tagGroups : Set<TagGroup>
    + findByCategory(category : Category) : TagGroup
    + findByTagGroupNameAndCategoryType(tagGroupName : String, categoryType : CategoryType) : TagGroup
    + save(tagGroup : TagGroup)
    + update(tagGroup : TagGroup)
    + delete(tagGroup : TagGroup)
}

class Tag {
    - id : Long
    - tagName : String
    - tagGroup : TagGroup
    + constructor()
    + getter()
    + setter()
}
interface TagRepository {
    - tags : Set<Tag>
    + findByTagNameAndTagGroup(tagGroup : TagGroup, tagName : String) : Tag
    + save(tag : Tag)
    + update(tag : Tag)
    + delete(tag : Tag)
}
class TagService {
    - categoryRepository : CategoryRepository
    - tagGroupRepository : TagGroupRepository
    - tagRepository : TagRepository
    + getTagsByCategory(category : Category) : Set<Tag>
}
class TagController {
    + GET /api/recommendation/tags() <<secured>>
}

class Image {
    - imgPath : String
    + constructor()
    + getter()
    + setter()
}
interface ImageRepository {
    - image : Set<Image>
    + save(image : Image)
    + delete(image : Image)
}
class ImageService {
    - imageRepository : ImageRepository
    + uploadImage(imageFile : MultipartFile)
    + deleteImageByImgPath(imgPath : String)
    - getImageType(String : imageName)
    - validateImage(imageFile : MultipartFile)
}
class ImageController {
    - imageService : ImageService
    + POST /api/images() <<secured>>
    + DELETE /api/images() <<secured>>
}

Image <-- ImageRepository
ImageRepository <-- ImageService
ImageService <-- ImageController

User <-- UserRepository
UserRepository <-- UserService
UserService <-- UserController
UserService <-- JwtAuthFilter

AuthService <-- AuthController
AuthService <-- UserController
AuthService <-- JwtAuthFilter

JwtService <-- AuthService
JwtService <-- JwtAuthFilter

ContactStatus <.. Contact
Contact <-- ContactRepository
ContactRepository <-- ContactService
ContactService <-- ContactController

User "1" *- "0..*" Contact
User "1" *-- "0..1" Image

Recommendation <-- RecommendationRepository
RecommendationRepository <-- RecommendationService
RecommendationService <-- RecommendationController

Recommendation "1" *-- "0..1" Image

RecommendationAssignmentStatus <.. RecommendationAssignment
RecommendationAssignment <-- RecommendationAssignmentRepository
RecommendationAssignmentRepository <-- RecommendationService

CategoryType <.. Category
Category <-- CategoryRepository
CategoryRepository <-- RecommendationService
CategoryRepository <-- TagService

TagGroup <-- TagGroupRepository
TagGroupRepository <-- RecommendationService
TagGroupRepository <-- TagService

Tag <-- TagRepository
TagRepository <-- TagService
TagRepository <-- RecommendationService
TagService <-- TagController

UserService <-- RecommendationService

note left of RecommendationService
    Kommuniziert mit dem UserService
end note

note left of TagController
    Kann zukünftig, zum erstellen und bearbeiten der Kategorien,
    Tag-Gruppen und Tags, um Admin-Routes erweitert werden.
    Aktuell ist das erstellen durch einen Seed geplant.
end note

@enduml