@startuml
skinparam classAttributeIconSize 0
hide empty members

class User {
    - id : Long
    - userName : String
    - displayName : String
    - email : String
    - password : String
    - imgPath : String
    - registrationDate : LocalDateTime
    + constructor()
    + getter()
    + setter()
}

interface UserRepository {
    - user : Set<User>
    + findByEmailOrUserName(email: String, userName: String) : User
    + existsByEmail(email : String) : boolean
    + existsByUserName(userName : String) : boolean
    + save(user : User)
    + update(user : User)
    + delete(user : User)
}

class UserService {
    - userRepository : UserRepository
    + registerUser(user : User)
    + updateUser(user : User
    + deleteUser(user : User)
    + findByEmailOrUserName(input : String) : User
}

class UserController {
    - userService : UserService
    - authService : AuthService
    + GET /api/user/me() <<secured>>
    + GET /api/user/search() <<secured>>
    + POST /api/user()
    + PATCH /api/user/me() <<secured>>
    + DELETE /api/user/me() <<secured>>
}

class JwtService {
    + generateToken(userName : String) : Token
    + extractUserName(token : Token) : String
}

class JwtAuthFilter {
    - jwtService : JwtService
    - authService : AuthService
    - userService : UserService
    # doFilterInternal()
}

note left of JwtAuthFilter
    Der JwtAuthFilter kontrolliert den
    Zugriff auf gesch端tzte Endpunkte.
    Fehlt ein Token oder ist dieser
    ung端ltig, wird die Anfrage abgelehnt.
    Ein g端ltiger Token macht den User
    im Controller verf端gbar.
end note

class AuthService {
    - jwtService : JwtService
    + login() : User
    + logout() : void
}

class AuthController {
    + POST /api/auth/login()
    + POST /api/auth/logout() <<secured>>
}

User <-- UserRepository
UserRepository <-- UserService
UserService <-- UserController
UserService <-- JwtAuthFilter

AuthService <-- AuthController
AuthService <-- UserController
AuthService <-- JwtAuthFilter

JwtService <-- AuthService
JwtService <-- JwtAuthFilter

@enduml